{"ast":null,"code":"// This function expects a JS object as an argument\n// The object should contain the following properties\n// - initialInvestment: The initial investment amount\n// - annualInvestment: The amount invested every year\n// - expectedReturn: The expected (annual) rate of return\n// - duration: The investment duration (time frame)\nexport function calculateInvestmentResults(_ref){let{initialInvestment,annualInvestment,expectedReturn,duration}=_ref;const annualData=[];let investmentValue=initialInvestment;for(let i=0;i<duration;i++){const interestEarnedInYear=investmentValue*(expectedReturn/100);investmentValue+=interestEarnedInYear+annualInvestment;annualData.push({year:i+1,// year identifier\ninterest:interestEarnedInYear,// the amount of interest earned in this year\nvalueEndOfYear:investmentValue,// investment value at end of year\nannualInvestment:annualInvestment// investment added in this year\n});}return annualData;}// The browser-provided Intl API is used to prepare a formatter object\n// This object offers a \"format()\" method that can be used to format numbers as currency\n// Example Usage: formatter.format(1000) => yields \"$1,000\"\nexport const formatter=new Intl.NumberFormat('en-US',{style:'currency',currency:'USD',minimumFractionDigits:0,maximumFractionDigits:0});","map":{"version":3,"names":["calculateInvestmentResults","_ref","initialInvestment","annualInvestment","expectedReturn","duration","annualData","investmentValue","i","interestEarnedInYear","push","year","interest","valueEndOfYear","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits"],"sources":["C:/Users/BEST LAPTOP/OneDrive/Desktop/Investment/final/src/util/investment.js"],"sourcesContent":["// This function expects a JS object as an argument\r\n// The object should contain the following properties\r\n// - initialInvestment: The initial investment amount\r\n// - annualInvestment: The amount invested every year\r\n// - expectedReturn: The expected (annual) rate of return\r\n// - duration: The investment duration (time frame)\r\nexport function calculateInvestmentResults({\r\n    initialInvestment,\r\n    annualInvestment,\r\n    expectedReturn,\r\n    duration,\r\n}) {\r\n    const annualData = [];\r\n    let investmentValue = initialInvestment;\r\n\r\n    for (let i = 0; i < duration; i++) {\r\n        const interestEarnedInYear = investmentValue * (expectedReturn / 100);\r\n        investmentValue += interestEarnedInYear + annualInvestment;\r\n        annualData.push({\r\n            year: i + 1, // year identifier\r\n            interest: interestEarnedInYear, // the amount of interest earned in this year\r\n            valueEndOfYear: investmentValue, // investment value at end of year\r\n            annualInvestment: annualInvestment, // investment added in this year\r\n        });\r\n    }\r\n\r\n    return annualData;\r\n}\r\n\r\n// The browser-provided Intl API is used to prepare a formatter object\r\n// This object offers a \"format()\" method that can be used to format numbers as currency\r\n// Example Usage: formatter.format(1000) => yields \"$1,000\"\r\nexport const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n});\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,MAAO,SAAS,CAAAA,0BAA0BA,CAAAC,IAAA,CAKvC,IALwC,CACvCC,iBAAiB,CACjBC,gBAAgB,CAChBC,cAAc,CACdC,QACJ,CAAC,CAAAJ,IAAA,CACG,KAAM,CAAAK,UAAU,CAAG,EAAE,CACrB,GAAI,CAAAC,eAAe,CAAGL,iBAAiB,CAEvC,IAAK,GAAI,CAAAM,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,QAAQ,CAAEG,CAAC,EAAE,CAAE,CAC/B,KAAM,CAAAC,oBAAoB,CAAGF,eAAe,EAAIH,cAAc,CAAG,GAAG,CAAC,CACrEG,eAAe,EAAIE,oBAAoB,CAAGN,gBAAgB,CAC1DG,UAAU,CAACI,IAAI,CAAC,CACZC,IAAI,CAAEH,CAAC,CAAG,CAAC,CAAE;AACbI,QAAQ,CAAEH,oBAAoB,CAAE;AAChCI,cAAc,CAAEN,eAAe,CAAE;AACjCJ,gBAAgB,CAAEA,gBAAkB;AACxC,CAAC,CAAC,CACN,CAEA,MAAO,CAAAG,UAAU,CACrB,CAEA;AACA;AACA;AACA,MAAO,MAAM,CAAAQ,SAAS,CAAG,GAAI,CAAAC,IAAI,CAACC,YAAY,CAAC,OAAO,CAAE,CACpDC,KAAK,CAAE,UAAU,CACjBC,QAAQ,CAAE,KAAK,CACfC,qBAAqB,CAAE,CAAC,CACxBC,qBAAqB,CAAE,CAC3B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}